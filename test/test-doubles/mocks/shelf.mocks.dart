// Mocks generated by Mockito 5.0.9 from annotations
// in gather_town_service/test/test-doubles/mocks/shelf.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shelf/src/request.dart' as _i2;
import 'package:stream_channel/stream_channel.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeRequest extends _i1.Fake implements _i2.Request {}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequest extends _i1.Mock implements _i2.Request {
  MockRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri())
          as Uri);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  String get handlerPath =>
      (super.noSuchMethod(Invocation.getter(#handlerPath), returnValue: '')
          as String);
  @override
  String get protocolVersion =>
      (super.noSuchMethod(Invocation.getter(#protocolVersion), returnValue: '')
          as String);
  @override
  Uri get requestedUri => (super.noSuchMethod(Invocation.getter(#requestedUri),
      returnValue: _FakeUri()) as Uri);
  @override
  bool get canHijack =>
      (super.noSuchMethod(Invocation.getter(#canHijack), returnValue: false)
          as bool);
  @override
  Map<String, Object> get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: <String, Object>{}) as Map<String, Object>);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, List<String>> get headersAll =>
      (super.noSuchMethod(Invocation.getter(#headersAll),
          returnValue: <String, List<String>>{}) as Map<String, List<String>>);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  _i2.Request change(
          {Map<String, Object?>? headers,
          Map<String, Object?>? context,
          String? path,
          dynamic body}) =>
      (super.noSuchMethod(
          Invocation.method(#change, [],
              {#headers: headers, #context: context, #path: path, #body: body}),
          returnValue: _FakeRequest()) as _i2.Request);
  @override
  Never hijack(void Function(_i3.StreamChannel<List<int>>)? callback) =>
      (super.noSuchMethod(Invocation.method(#hijack, [callback]),
          returnValue: null) as Never);
  @override
  _i4.Stream<List<int>> read() =>
      (super.noSuchMethod(Invocation.method(#read, []),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Future<String> readAsString([_i5.Encoding? encoding]) =>
      (super.noSuchMethod(Invocation.method(#readAsString, [encoding]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
}
