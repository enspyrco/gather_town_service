// Mocks generated by Mockito 5.0.9 from annotations
// in gather_town_service/test/test-doubles/mocks/dart_core.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUri extends _i1.Fake implements Uri {}

/// A class which mocks [Uri].
///
/// See the documentation for Mockito's code generation for more information.
class MockUri extends _i1.Mock implements Uri {
  MockUri() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get scheme =>
      (super.noSuchMethod(Invocation.getter(#scheme), returnValue: '')
          as String);
  @override
  String get authority =>
      (super.noSuchMethod(Invocation.getter(#authority), returnValue: '')
          as String);
  @override
  String get userInfo =>
      (super.noSuchMethod(Invocation.getter(#userInfo), returnValue: '')
          as String);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: '')
          as String);
  @override
  String get fragment =>
      (super.noSuchMethod(Invocation.getter(#fragment), returnValue: '')
          as String);
  @override
  List<String> get pathSegments =>
      (super.noSuchMethod(Invocation.getter(#pathSegments),
          returnValue: <String>[]) as List<String>);
  @override
  Map<String, String> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, List<String>> get queryParametersAll =>
      (super.noSuchMethod(Invocation.getter(#queryParametersAll),
          returnValue: <String, List<String>>{}) as Map<String, List<String>>);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  bool get hasScheme =>
      (super.noSuchMethod(Invocation.getter(#hasScheme), returnValue: false)
          as bool);
  @override
  bool get hasAuthority =>
      (super.noSuchMethod(Invocation.getter(#hasAuthority), returnValue: false)
          as bool);
  @override
  bool get hasPort =>
      (super.noSuchMethod(Invocation.getter(#hasPort), returnValue: false)
          as bool);
  @override
  bool get hasQuery =>
      (super.noSuchMethod(Invocation.getter(#hasQuery), returnValue: false)
          as bool);
  @override
  bool get hasFragment =>
      (super.noSuchMethod(Invocation.getter(#hasFragment), returnValue: false)
          as bool);
  @override
  bool get hasEmptyPath =>
      (super.noSuchMethod(Invocation.getter(#hasEmptyPath), returnValue: false)
          as bool);
  @override
  bool get hasAbsolutePath => (super
          .noSuchMethod(Invocation.getter(#hasAbsolutePath), returnValue: false)
      as bool);
  @override
  String get origin =>
      (super.noSuchMethod(Invocation.getter(#origin), returnValue: '')
          as String);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  bool isScheme(String? scheme) =>
      (super.noSuchMethod(Invocation.method(#isScheme, [scheme]),
          returnValue: false) as bool);
  @override
  String toFilePath({bool? windows}) => (super.noSuchMethod(
      Invocation.method(#toFilePath, [], {#windows: windows}),
      returnValue: '') as String);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  Uri replace(
          {String? scheme,
          String? userInfo,
          String? host,
          int? port,
          String? path,
          Iterable<String>? pathSegments,
          String? query,
          Map<String, dynamic>? queryParameters,
          String? fragment}) =>
      (super.noSuchMethod(
          Invocation.method(#replace, [], {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment
          }),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri removeFragment() =>
      (super.noSuchMethod(Invocation.method(#removeFragment, []),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri resolve(String? reference) =>
      (super.noSuchMethod(Invocation.method(#resolve, [reference]),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri resolveUri(Uri? reference) =>
      (super.noSuchMethod(Invocation.method(#resolveUri, [reference]),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri normalizePath() =>
      (super.noSuchMethod(Invocation.method(#normalizePath, []),
          returnValue: _FakeUri()) as Uri);
}
